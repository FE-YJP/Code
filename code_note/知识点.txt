nodejs
https://blog.csdn.net/itkingone/article/details/79259490
jquery事件方法
方法	描述
bind()	向元素添加事件处理程序
blur()	添加/触发失去焦点事件
change()	添加/触发 change 事件
click()	添加/触发 click 事件
dblclick()	添加/触发 double click 事件
event.currentTarget	在事件冒泡阶段内的当前 DOM 元素
event.isDefaultPrevented()	返回指定的 event 对象上是否调用了 event.preventDefault()
event.isPropagationStopped()	返回指定的 event 对象上是否调用了 event.stopPropagation()
event.pageX	返回相对于文档左边缘的鼠标位置
event.pageY	返回相对于文档上边缘的鼠标位置
event.preventDefault()	阻止事件的默认行为
event.relatedTarget	返回当鼠标移动时哪个元素进入或退出
event.result	包含由被指定事件触发的事件处理程序返回的最后一个值
event.stopImmediatePropagation()	阻止其他事件处理程序被调用
event.stopPropagation()	阻止事件向上冒泡到 DOM 树，阻止任何父处理程序被事件通知
event.target	返回哪个 DOM 元素触发事件
event.timeStamp	返回从 1970 年 1 月 1 日到事件被触发时的毫秒数
event.type	返回哪种事件类型被触发
event.which	返回指定事件上哪个键盘键或鼠标按钮被按下
focus()	添加/触发 focus 事件
hover()	添加两个事件处理程序到 hover 事件
keydown()	添加/触发 keydown 事件
keypress()	添加/触发 keypress 事件
keyup()	添加/触发 keyup 事件
mousedown()	添加/触发 mousedown 事件
mouseenter()	添加/触发 mouseenter 事件
mouseleave()	添加/触发 mouseleave 事件
mousemove()	添加/触发 mousemove 事件
mouseout()	添加/触发 mouseout 事件
mouseover()	添加/触发 mouseover 事件
mouseup()	添加/触发 mouseup 事件
off()	移除通过 on() 方法添加的事件处理程序
on()	向元素添加事件处理程序
one()	向被选元素添加一个或多个事件处理程序。该处理程序只能被每个元素触发一次
resize()	添加/触发 resize 事件
scroll()	添加/触发 scroll 事件
select()	添加/触发 select 事件
submit()	添加/触发 submit 事件
trigger()	触发绑定到被选元素的所有事件
triggerHandler()	触发绑定到被选元素的指定事件上的所有函数
unbind()	从被选元素上移除添加的事件处理程序
unload()	在版本 1.8 中被废弃。添加事件处理程序到 unload 事件
contextmenu()	添加事件处理程序到 contextmenu 事件

jquery获得内容 - text()、html() 以及 val()
添加新的 HTML 内容
append() - 在被选元素的结尾插入内容
prepend() - 在被选元素的开头插入内容
after() - 在被选元素之后插入内容
before() - 在被选元素之前插入内容
删除元素/内容
remove() - 删除被选元素（及其子元素）
Query remove() 方法也可接受一个参数，允许您对被删元素进行过滤
empty() - 从被选元素中删除子元素

jquery动画
animate() 方法执行 CSS 属性集的自定义动画。
(selector).animate({styles},speed,easing,callback)//不支持颜色变化

jquery遍历
遍历祖先
parent() 方法返回被选元素的直接父元素。
parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)
parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。
遍历后代
children() 方法返回被选元素的所有直接子元素。
find() 方法返回被选元素的后代元素，一路向下直到最后一个后代
遍历同胞
siblings() 方法返回被选元素的所有同胞元素。不包括自己
next() 方法返回被选元素的下一个同胞元素。
nextAll() 方法返回被选元素的所有跟随的同胞元素。
nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。不包括括号内的元素
prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）
遍历之过滤
first() 方法返回被选元素的首个元素。
last() 方法返回被选元素的最后一个元素。
eq() 方法返回被选元素中带有指定索引号的元素。索引号从 0 开始，因此首个元素的索引号是 0 而不是 1
filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。
not() 方法返回不匹配标准的所有元素
jQuery-ajax
jQuery load() 方法是简单但强大的 AJAX 方法。
load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
$(selector).load(URL,data,callback);
可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：
responseTxt - 包含调用成功时的结果内容
statusTXT - 包含调用的状态
xhr - 包含 XMLHttpRequest 对象
$.get() 方法通过 HTTP GET 请求从服务器上请求数据。
$.get(URL,callback)
$.post() 方法通过 HTTP POST 请求向服务器提交数据。
$.post(URL,data,callback);
ajax() 方法用于执行 AJAX（异步 HTTP）请求。
$.ajax({name:value, name:value, ... })
常用参数type,url,success,error,data
jQuery - noConflict() 方法
$.noConflict();解放jQuery,也可以自定义如var jq=$.noConflict()
jQuery  data() 方法
data() 方法向被选元素附加数据，或者从被选元素获取数据。
$(selector).data(name,value)//$(selector).removeData(name)
//封装ajax
function ajax(obj){
        //浏览器兼容
        var xhr,data;
        if(window.XMLHttpRequest){
          xhr=new XMLHttpRequest();
        }else{
          xhr=new ActiveXObject("Microsoft.XMLHTTP");
        }
        //监听状态改变
        xhr.onreadystatechange=function(){
          if(xhr.readyState==4&&xhr.status==200){
            data=xhr.responseText;
            if(obj.success){
              obj.success(data);
            }
          }else{
            if(obj.error){
              obj.error();
            }
          }
        }
        //发送的数据对象格式,对象编程字符串
        var str="";
        if(obj.data){
          var data=obj.data;
          for(var item in data){
            str+=item+"="+data[item]+"&";
          }
          str=str.replace(/&$/,"");
        }
        if(obj.method.toLowerCase()=="get"){
          xhr.open("GET",obj.url+"?"+str,true);
          xhr.send();
        }
        if(obj.method.toLowerCase()=="post"){
          xhr.open("POST",obj.url,true);
          xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
          xhr.send(str)
        }
      }
//测试
    ajax({
      url:"index.html",
      method:"get",
      data:{
        fname:"wang",
        lname:"huahua",

      },
			success:function(data){
				console.log(data);
			}
    })
xmlhttp.readyState的值及解释：

0：请求未初始化（还没有调用 open()）。

1：请求已经建立，但是还没有发送（还没有调用 send()）。

2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。

3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。

4：响应已完成；您可以获取并使用服务器的响应了。

xmlhttp.status的值及解释：

100――客户必须继续发出请求

101――客户要求服务器根据请求转换HTTP协议版本

200――交易成功

201――提示知道新文件的URL

202――接受和处理、但处理未完成

203――返回信息不确定或不完整

204――请求收到，但返回信息为空

205――服务器完成了请求，用户代理必须复位当前已经浏览过的文件

206――服务器已经完成了部分用户的GET请求

300――请求的资源可在多处得到

301――删除请求数据

302――在其他地址发现了请求数据

303――建议客户访问其他URL或访问方式

304――客户端已经执行了GET，但文件未变化

305――请求的资源必须从服务器指定的地址得到

306――前一版本HTTP中使用的代码，现行版本中不再使用

307――申明请求的资源临时性删除

400――错误请求，如语法错误

401――请求授权失败

402――保留有效ChargeTo头响应

403――请求不允许

404――没有发现文件、查询或URl

405――用户在Request-Line字段定义的方法不允许

406――根据用户发送的Accept拖，请求资源不可访问

407――类似401，用户必须首先在代理服务器上得到授权

408――客户端没有在用户指定的饿时间内完成请求

409――对当前资源状态，请求不能完成

410――服务器上不再有此资源且无进一步的参考地址

411――服务器拒绝用户定义的Content-Length属性请求

412――一个或多个请求头字段在当前请求中错误

413――请求的资源大于服务器允许的大小

414――请求的资源URL长于服务器允许的长度

415――请求资源不支持请求项目格式

416――请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段

417――服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求

合起来

500――服务器产生内部错误

501――服务器不支持请求的函数

502――服务器暂时不可用，有时是为了防止发生系统过载

503――服务器过载或暂停维修

504――关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长

505――服务器不支持或拒绝支请求头中指定的HTTP版本

1xx:信息响应类，表示接收到请求并且继续处理

2xx:处理成功响应类，表示动作被成功接收、理解和接受

3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理

4xx:客户端错误，客户请求包含语法错误或者是不能正确执行

5xx:服务端错误，服务器不能正确执行一个正确的请求

xmlhttp.readyState==4 && xmlhttp.status==200的解释：请求完成并且成功返回